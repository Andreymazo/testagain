### Задача 1. У вас есть восемь монет и одни весы с двумя чашами. Одна монета немного тяжелее остальных. Как за два взвешивания найти тяжелую монету?
# Делим по 3 монеты, если равны, то потом 2 оставшиеся и всё. Если не равны, то берем 2 из трех и либо одна из них фальшивая, либо отложенная. 

### Задача 2. Есть числа от трех до одиннадцати. Есть квадрат — 3 на 3 клетки:
### а б в
### г д е
### ё ж з
### (Буквы ничего не значат, кроме того, что числа не повторяются)
### Можно ли расставить числа в клетки квадрата таким образом, что перемножения чисел в строках дает тот же результат, что и произведение 
### чисел в столбцах с теми же номерами?
### Если можно — расставьте, если нельзя — объясните почему.


import itertools

def nums_inoeder():
    #  lst1 = [1,2,3]
    #  print(list(itertools.permutations(lst1, 3)))
     
  lst1 = [i for i in range(3,12)]
  for a1, a2,a3,a4,a5, a6, a7, a8, a9  in itertools.permutations(lst1, 9):
      
    h2 = [(a1,0,0), (a2,0,1), (a3,0,2), (a4,1,0), (a5,1,1), (a6,1,2), (a7,2,0), (a8,2,1), (a9,2,2)]
 
    if h2[0][0]*h2[0][1] == h2[0][0]*h2[3][0]:
        print(h2[0][0]*h2[0][1], h2[0][0], h2[0][1], h2[0][0], 'h2[3][0]', h2[3][0] )
    if h2[0][0]*h2[0][1] == h2[1][0]*h2[4][0]:
        print(h2[0][0]*h2[0][1], h2[0][0], h2[0][1], h2[1][0], 'h2[4][0]', h2[4][0] )
    if h2[0][0]*h2[0][1] == h2[2][0]*h2[5][0]:
        print(h2[0][0]*h2[0][1], h2[0][0], h2[0][1], h2[2][0], h2[5][0] )
    # 0,0 0,1 АБ
    
    # 0,0 3,0 АГ
    # 1,0 4,0 БД
    # 2,0 5,0 ВЕ
    ##########################

    if h2[0][0]*h2[2][0] == h2[0][0]*h2[6][0]:
        print(h2[0][0]*h2[2][0], h2[0][0], h2[2][0], h2[0][0], h2[6][0] )
    if h2[0][0]*h2[2][0] == h2[1][0]*h2[7][0]:
        print(h2[0][0]*h2[2][0], h2[0][0], h2[2][0], h2[1][0], h2[7][0] )
    if h2[0][0]*h2[2][0] == h2[2][0]*h2[8][0]:
        print(h2[0][0]*h2[2][0], h2[0][0], 'h2[2][0]', h2[2][0], h2[2][0], 'h2[8][0]', h2[8][0] )
    # 0,0 2,0 АВ

    # 0,0 6,0 АЁ
    # 1,0 7,0 БЖ
    # 2,0 8,0 ВЗ
    #########################
    if h2[1][0]*h2[2][0] == h2[4][0]*h2[7][0]:
        print(h2[1][0]*h2[2][0], h2[1][0], h2[2][0], h2[4][0], h2[7][0] )
    if h2[1][0]*h2[2][0] == h2[3][0]*h2[6][0]:
        print(h2[1][0]*h2[2][0], h2[1][0], h2[2][0], h2[3][0], 'h2[6][0]', h2[6][0] )
    if h2[1][0]*h2[2][0] == h2[5][0]*h2[8][0]:
        print(h2[1][0]*h2[2][0], h2[1][0], h2[2][0], h2[5][0], 'h2[8][0]', h2[8][0] )
    ###############################################################################
    # 1,0 2,0 БВ    
    
    # 4,0 7,0 ДЖ 
    # 3,0 6,0 ГЁ
    # 5,0 8,0 ЕЗ
### а 10 4 Можно кучу вариантов подставить, все вылезают в консоль.
### г д 8
### ё ж 5
    ##################
   

if __name__ == "__main__":
     nums_inoeder()
     
### Задача 3. Ученые разработали новый материал неизвестной прочности. Они знают, что материал разбивается при падении с высоты от 1 метра до 5 000 метров. 
###  Но не знают, с какой именно высоты. Чтобы определить прочность, ученые поднимают предмет на некоторую высоту и сбрасывают его оттуда. Их задача — опр
### еделить, начиная с какой именно высоты предмет начнет разбиваться. Специальная платформа, с помощью которой они осуществляют эксперимент, скидывает 
### предмет только с дискретных высот (1, 2, 3 ... 4999, 5000 метров — платформа не может скинуть предмет, например, с 2,5 метров. Точности в 1 метр 
### ученым вполне достаточно). При падении с высоты "n" метров предмет уничтожается. Если же его сбрасывали с высоты ниже "n", то его можно использовать 
### в повторных экспериментах. Нужно АБСОЛЮТНО ТОЧНО найти ту высоту, начиная с которой предметы разрушаются. Сделать это нужно за МИНИМАЛЬНО возможное 
### число экспериментов. У ученых при этом всего 2 предмета, но они абсолютно одинаковые. Каким образом этого можно достигнуть? Сколько экспериментов при 
### этом максимально потребуется?

### Допустим не везет. Тогда откинули половину, а остальное по 1 отбираем. 2500 раз всего.

### Задача 4. В университетскую столовую пришли трое студентов купить пирожки. Один хочет купить треть всех имеющихся в столовой пирожков и еще 2 пирожка. 
### Другой хочет купить четверть от всех имеющихся пирожков и ещё 3 пирожка. А третий хочет купить пятую часть всех пирожков и ещё 8 пирожков. Если все трое 
### купят столько пирожков, сколько планируют, то в столовой как раз закончатся все пирожки. Сколько пирожков есть в столовой? 
def num_pirozh():
    
    ### x = x/3 + 2 + x/4 + 3 + x/5 + 8 | *6
    ### 6x = 2x + 12 + x *3 /2 + 18 + x /5 *6 + 48 | *2 
    ### 12x = 4x + 24 + 3x + 36 + x /5 *12 + 96 | *5
    ### 60x = 20x + 120 + 15x + 180 + 12x + 480
    ### 13x = 300+480 = 780
    ### x = 60